from aiogram import types, Dispatcher
from bot_create import dp, bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from db import dbusers, dbcommon, dbapplicants, dbcompanies
from keyboards import inline_kb, first_kb, first2_kb, sendresumeaccept_kb, sendjobaccept_kb, sendcomaccept_kb
from keyboards import cancel_kb, skip_step, mainApplicant_kb, beforeApplicant_kb, beforeApplicant2_kb, mainCompany_kb, highMenu_kb, \
cancelwithyes_kb, editCompData_kb


# @dp.message_handler(commands=['start', 'help'])
async def command_start(message : types.Message):
    try:
        tg_id = message.from_user.id
        countUs = dbusers.checkUserByTgId(tg_id)
        if countUs == 0:
            dbusers.addNewNaked(message.from_user.id, message.from_user.username, message.from_user.first_name)
            saluteText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\njobbot —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å \
            –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é.'
            await message.reply(saluteText, reply_markup=first2_kb)
        elif countUs == 1:
            countAppl = dbapplicants.checkApplByTgId(tg_id)
            countComp = dbcompanies.checkCompByTgId(tg_id)
            if countComp == 0:
                if countAppl == 0:
                    saluteText = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Å–Ω–æ–≤–∞!\n–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è, –Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è. \
                    \n\n–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å?'
                    await message.reply(saluteText, reply_markup=first2_kb)
                elif countAppl > 0:
                    saluteText = '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n–ú–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å'
                    await message.reply(saluteText, reply_markup=highMenu_kb)
            elif countComp == 1:
                saluteText = '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n–ú–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å'
                await message.reply(saluteText, reply_markup=highMenu_kb)
    except:
        await message.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start')

# @dp.message_handler(commands=['–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def go_to_high(message : types.Message):
    try:
        tg_id = message.from_user.id
        countUs = dbusers.checkUserByTgId(tg_id)
        if countUs == 0:
            dbusers.addNewNaked(message.from_user.id, message.from_user.username, message.from_user.first_name)
            saluteText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\njobbot —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å \
            –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é.'
            await message.reply(saluteText, reply_markup=first2_kb)
        elif countUs == 1:
            countAppl = dbapplicants.checkApplByTgId(tg_id)
            countComp = dbcompanies.checkCompByTgId(tg_id)
            if countComp == 0:
                if countAppl == 0:
                    saluteText = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Å–Ω–æ–≤–∞!\n–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è, –Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è. \
                    \n\n–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å?'
                    await message.reply(saluteText, reply_markup=first2_kb)
                elif countAppl > 0:
                    saluteText = '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n–ú–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å'
                    await message.reply(saluteText, reply_markup=highMenu_kb)
            elif countComp == 1:
                saluteText = '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n–ú–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å'
                await message.reply(saluteText, reply_markup=highMenu_kb)
    except:
        await message.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start')

# @dp.message_handler(commands=['–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ'])
async def create_new_resum(message : types.Message):
    tg_id = message.from_user.id
    countUs = dbusers.checkUserByTgId(tg_id)
    if countUs == 0:
        dbusers.addNewNaked(message.from_user.id, message.from_user.username, message.from_user.first_name)
        saluteText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\njobbot —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å \
        –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.'
        await message.reply(saluteText, reply_markup=first_kb)
    elif countUs == 1:
        countAppl = dbapplicants.checkApplByTgId(tg_id)
        countComp = dbcompanies.checkCompByTgId(tg_id)
        if countAppl > 0:
            makedResumeText = '–†–∞–¥—ã, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ —É –Ω–∞—Å üòâ\n'\
            '–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã!\n\n–†–∞–±–æ—Ç–∞—è —Å –Ω–∞–º–∏ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã\\–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª'
            await message.reply(makedResumeText, reply_markup=sendresumeaccept_kb)
        elif countAppl == 3:
            saluteText = '–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å 3 —Ä–µ–∑—é–º–µ.\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –º–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è'
            await message.reply(saluteText, reply_markup=mainApplicant_kb)

@dp.callback_query_handler(text='createResume')
async def createresume_command(callback : types.CallbackQuery):
    tg_id = callback.from_user.id
    countUs = dbusers.checkUserByTgId(tg_id)
    if countUs == 0:
        dbusers.addNewNaked(message.from_user.id, message.from_user.username, message.from_user.first_name)
        saluteText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\njobbot —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å \
        –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.'
        await bot.send_message(saluteText, reply_markup=first_kb)
    elif countUs == 1:
        countAppl = dbapplicants.checkApplByTgId(tg_id)
        countComp = dbcompanies.checkCompByTgId(tg_id)
        if countAppl > 0:
            makedResumeText = '–†–∞–¥—ã, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ —É –Ω–∞—Å üòâ\n'\
            '–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã!\n\n–†–∞–±–æ—Ç–∞—è —Å –Ω–∞–º–∏ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã\\–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª'
            await bot.send_message(callback.from_user.id, makedResumeText, reply_markup=sendresumeaccept_kb)
            await callback.answer()
        elif countAppl == 3:
            saluteText = '–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å 3 —Ä–µ–∑—é–º–µ.\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –º–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è'
            await bot.send_message(callback.from_user.id, saluteText, reply_markup=mainApplicant_kb)

class FSMNewapplicant(StatesGroup):
    firstname = State()
    lastname = State()
    patronymic = State()
    lineBusiness = State()
    educationForm = State()
    addedEducationForm = State()
    careerObjective = State()
    desiredSalary = State()
    cityWork = State()
    distantWork = State()
    relocate = State()
    workExperience = State()
    desiredWorkSchedule = State()
    phone = State()
    email = State()

# –ù–∞—á–∞–ª–æ –¥–∏–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
@dp.callback_query_handler(text='sendResumeAcc')
async def command_register(callback : types.Message):
    tg_id = callback.from_user.id
    countUs = dbusers.checkUserByTgId(tg_id)
    if countUs == 0:
        dbusers.addNewNaked(message.from_user.id, message.from_user.username, message.from_user.first_name)
        saluteText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\njobbot —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å \
        –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.'
        await bot.send_message(saluteText, reply_markup=first_kb)
    elif countUs == 1:
        countAppl = dbapplicants.checkApplByTgId(tg_id)
        countComp = dbcompanies.checkCompByTgId(tg_id)
        if countAppl > 0:
            await FSMNewapplicant.firstname.set()
            await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è', reply_markup=cancel_kb)
            await callback.answer()
        elif countAppl == 3:
            saluteText = '–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å 3 —Ä–µ–∑—é–º–µ.\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è'
            await bot.send_message(callback.from_user.id, saluteText, reply_markup=mainApplicant_kb)

# –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# @dp.message_handler(state="*", commands="–æ—Ç–º–µ–Ω–∞")
# @dp.message_handler(Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    # –ø–æ–ª—É—á–∞—é –∏–º—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å—Ç—ç–π—Ç–∞, –ø–æ –Ω–µ–º—É –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    stName = current_state.split(':')[0]
    tg_id = message.from_user.id
    if current_state is None:
        return
    await state.finish()
    if stName == 'FSMNewapplicant':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—é–º–µ, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —à–∞–≥—É –ø–æ–∑–∂–µ'
        await message.reply(messTxt, reply_markup=first2_kb)
    elif stName == 'FSMNewemployer':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –ø–æ–∑–∂–µ'
        await message.reply(messTxt, reply_markup=mainCompany_kb)
    elif stName == 'FSMNewonetimework':
        # countAppl = dbapplicants.checkApplByTgId(tg_id)
        # countComp = dbcompanies.checkCompByTgId(tg_id)
        # if countComp == 0:
        #     if countAppl == 0:
        #         makedResumeText = '–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ä–µ–∑—é–º–µ –∏ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π'
        #         await message.reply(callback.from_user.id, makedResumeText, reply_markup=first_kb)
        #     elif countAppl > 0:
        #         saluteText = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —à–∞–≥—É –ø–æ–∑–∂–µ'
        #         await message.reply(saluteText, reply_markup=mainApplicant_kb)
        # elif countComp == 1:
        #     messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —à–∞–≥—É –ø–æ–∑–∂–µ'
        #     await message.reply(messTxt, reply_markup=mainCompany_kb)
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —à–∞–≥—É –ø–æ–∑–∂–µ'
        await message.reply(messTxt, reply_markup=mainCompany_kb)
    elif stName == 'FSMAddedu':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —à–∞–≥—É –ø–æ–∑–∂–µ'
        await message.reply(messTxt, reply_markup=mainApplicant_kb)
    elif stName == 'FSMGotoeditappldata':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —à–∞–≥—É –ø–æ–∑–∂–µ'
        await message.reply(messTxt, reply_markup=mainApplicant_kb)
    elif stName == 'FSMNewcompany':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —à–∞–≥—É –ø–æ–∑–∂–µ'
        await message.reply(messTxt, reply_markup=first2_kb)
    elif stName == 'FSMNewpdffile':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É PDF-—Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ'
        await message.reply(messTxt, reply_markup=mainApplicant_kb)
    elif stName == 'FSMNewonetimeforappl':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã\n\n–í—ã –≤–≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è'
        await message.reply(messTxt, reply_markup=mainApplicant_kb)
    elif stName == 'FSMGotoeditcompdata':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏\n\n–í—ã –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏'
        await message.reply(messTxt, reply_markup=editCompData_kb)
    elif stName == 'FSMGotoeditempldata':
        messTxt = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏\n\n–í—ã –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏'
        await message.reply(messTxt, reply_markup=editCompData_kb)

# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.firstname)
async def get_firstname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tg_id'] = message.from_user.id
        if message.from_user.username == None:
            data['tg-login'] = 'None'
        else:
            data['tg-login'] = message.from_user.username
        data['firstname'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é", reply_markup=cancel_kb)

# –õ–æ–≤–∏–º —Ñ–∞–º–∏–ª–∏—é –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.lastname)
async def get_lastname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['lastname'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ", reply_markup=cancel_kb)

# –õ–æ–≤–∏–º –æ—Ç—á–µ—Å—Ç–≤–æ –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.patronymic)
# async def get_patronymic(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['patronymic'] = message.text
#     await FSMNewapplicant.next()
#     lineBusinessInfo = dbcommon.getAllLineBusiness()
#     aboutLinesText = '''
#     –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —É–∫–∞–∑–∞–≤ –µ–≥–æ —Ü–∏—Ñ—Ä—É\n\n
#     –õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ
#     '''
#     linesText = ''
#     for item in lineBusinessInfo:
#         linesText = linesText + str(item['id']) + ' - ' + item['name'] + '\n'
#     await message.reply(aboutLinesText, reply_markup=cancel_kb)
#     await message.answer(linesText, reply_markup=cancel_kb)
async def get_patronymic(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['patronymic'] = message.text
    await FSMNewapplicant.next()
    lineBusinessInfo = dbcommon.getAllLineBusiness()
    aboutLinesText = '''
    –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏. –ú—ã –±—É–¥–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    \n\n–í—ã–±—Ä–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —É–∫–∞–∑–∞–≤ –µ–≥–æ —Ü–∏—Ñ—Ä—É\n\n
    '''
    linesText = ''
    for item in lineBusinessInfo:
        linesText = linesText + str(item['id']) + ' - ' + item['name'] + '\n'
    await message.reply(aboutLinesText, reply_markup=cancel_kb)
    await message.answer(linesText, reply_markup=cancel_kb)

# –õ–æ–≤–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.lineBusiness)
# async def get_linebusiness(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         lineBusinessInfo = dbcommon.getAllLineBusiness()
#         for item in lineBusinessInfo:
#             if (str(item['id']) == message.text):
#                 data['lineBusiness'] = item['name']
#                 data['lineBusinessId'] = int(item['id'])
#                 break
#             else:
#                 data['lineBusiness'] = message.text
#                 data['lineBusinessId'] = 0
#         # data['lineBusiness'] = message.text
#     await FSMNewapplicant.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é –í—ã –ø—Ä–æ—à–ª–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é", reply_markup=cancel_kb)
async def get_linebusiness(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        lineBusinessInfo = dbcommon.getAllLineBusiness()
        listEmp = []
        for item in lineBusinessInfo:
            listEmp.append(item['id'])
        if int(message.text) in listEmp:
            oneLineBusinessInfo = dbcommon.getLineBusinessById(int(message.text))
            data['lineBusiness'] = oneLineBusinessInfo[0]['name']
            data['lineBusinessId'] = int(oneLineBusinessInfo[0]['id'])
            print(data)
            await FSMNewapplicant.next()
            await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é –í—ã –ø—Ä–æ—à–ª–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é", reply_markup=cancel_kb)
        else:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", reply_markup=cancel_kb)
            # if (str(item['id']) == message.text):
            #     data['lineBusiness'] = item['name']
            #     data['lineBusinessId'] = int(item['id'])
            #     await FSMNewapplicant.next()
            #     await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é –í—ã –ø—Ä–æ—à–ª–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é", reply_markup=cancel_kb)
            #     break
            # else:
            #     await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", reply_markup=cancel_kb)
        # data['lineBusiness'] = message.text

# –õ–æ–≤–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
async def get_educationform(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['educationForm'] = message.text
    await FSMNewapplicant.next()
    newLinesText = '''
    –ú–æ–∂–µ—Ç –í—ã –ø—Ä–æ—à–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è?\n\n–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ–µ –∑–¥–µ—Å—å, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥\n\n
    '''
    await message.reply(newLinesText, reply_markup=skip_step)

# –õ–æ–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.educationForm)
async def get_addededucationform(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['addedEducationForm'] = message.text
        if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            data['addedEducationForm'] = 'empty'
        else:
            data['addedEducationForm'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å", reply_markup=cancel_kb)

# –õ–æ–≤–∏–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.careerObjective)
async def get_careerobjective(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['careerObjective'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É (–∑–∞ –º–µ—Å—è—Ü, –∑–∞ —á–∞—Å, –ª–∏–±–æ –∑–∞ –ø—Ä–æ–µ–∫—Ç)", reply_markup=cancel_kb)

# –õ–æ–≤–∏–º –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.desiredSalary)
async def get_desiredsalary(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desiredSalary'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å", reply_markup=cancel_kb)

# –õ–æ–≤–∏–º –≥–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.cityWork)
async def get_citywork(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cityWork'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–ì–æ—Ç–æ–≤—ã –ª–∏ –í—ã —Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω–æ?", reply_markup=cancelwithyes_kb)

# –õ–æ–≤–∏–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª—ë–Ω–Ω–æ –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.distantWork)
async def get_distantwork(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['distantWork'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–ì–æ—Ç–æ–≤—ã –ª–∏ –í—ã –∫ –ø–µ—Ä–µ–µ–∑–¥—É?", reply_markup=cancelwithyes_kb)

# –õ–æ–≤–∏–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–µ–∑–¥—É –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.relocate)
async def get_relocate(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['relocate'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", reply_markup=cancel_kb)

# –õ–æ–≤–∏–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.workExperience)
async def get_workexperience(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['workExperience'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, 5/2", reply_markup=cancel_kb)

# –õ–æ–≤–∏–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.desiredWorkSchedule)
async def get_desiredworkschedule(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desiredWorkSchedule'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n–õ–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥", reply_markup=skip_step)

# –õ–æ–≤–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.phone)
async def get_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            data['phone'] = 'empty'
        else:
            data['phone'] = message.text
    await FSMNewapplicant.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à e-mail –∞–¥—Ä–µ—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n–õ–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥", reply_markup=skip_step)

# –õ–æ–≤–∏–º e-mail –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewapplicant.email)
async def get_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            data['email'] = 'empty'
        else:
            data['email'] = message.text
    applId = await dbusers.addNewApplicant(state)
    await state.finish()
    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è pdf
    forSendPDFText = '–ó–∞–≥—Ä—É–∑–∏—Ç—å pdf-—Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∑—é–º–µ'
    forSendPDFButton = InlineKeyboardMarkup(row_width=1)
    forSendPDFButton.add(InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å pdf —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ', callback_data='sendPDF_' + str(applId)))
    successText = '''
    –í–∞—à–µ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ\n\n–£ –í–∞—Å –µ—Å—Ç—å —Ä–µ–∑—é–º–µ –≤ –≤–∏–¥–µ PDF-—Ñ–∞–π–ª–∞?\n\n–ú–æ–∂–µ—Ç–µ –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å.
    '''
    await bot.send_message(message.from_user.id, successText, reply_markup=beforeApplicant2_kb)
    await bot.send_message(message.from_user.id, forSendPDFText, reply_markup=forSendPDFButton)
    # await FSMNewapplicant.next()
    # await message.reply("–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n–õ–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥", reply_markup=skip_step)

# –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –ª–æ–≤–ª–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# @dp.message_handler(content_types=['document'], state=FSMNewapplicant.pdfFile)
# async def load_pdffile(message: types.Message, state=FSMContext):
#     async with state.proxy() as data:
#         if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
#             data['pdfFile'] = 'empty'
#         else:
#             data['pdfFile'] = message.document.file_id
#     print(data)
    # await dbusers.addNewApplicant(state)
    # await state.finish()
    # successText = '''
    # –í–∞—à–µ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –æ–Ω–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º
    # '''
    # successText = '''
    # –í–∞—à–µ —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ
    # '''
    # await bot.send_message(message.from_user.id, successText)

@dp.callback_query_handler(text='createCom')
async def createjob_command(callback : types.CallbackQuery):
    tg_id = callback.from_user.id
    countUs = dbusers.checkUserByTgId(tg_id)
    if countUs == 0:
        dbusers.addNewNaked(callback.from_user.id, callback.from_user.username, callback.from_user.first_name)
        saluteText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\njobbot —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å \
        –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.'
        await bot.send_message(callback.from_user.id, saluteText, reply_markup=first_kb)
    elif countUs == 1:
        countComp = dbcompanies.checkCompByTgId(tg_id)
        if countComp == 0:
            makedJobText = '–†–∞–¥—ã, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é\n'\
            '–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –í–∞—à–µ–π —Ä–∞–±–æ—Ç—ã!\n\n–†–∞–±–æ—Ç–∞—è —Å –Ω–∞–º–∏ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã\\–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª'
            await bot.send_message(callback.from_user.id, makedJobText, reply_markup=sendcomaccept_kb)
            await callback.answer()
        elif countComp == 1:
            saluteText = '–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é —Ä–∞–Ω–µ–µ, –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë'
            await bot.send_message(callback.from_user.id, saluteText, reply_markup=mainCompany_kb)

class FSMNewcompany(StatesGroup):
    compname = State()
    lineBuiss = State()
    city = State()

# –ù–∞—á–∞–ª–æ –¥–∏–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
@dp.callback_query_handler(text='sendComAcc')
async def command_register(callback : types.Message):
    tg_id = callback.from_user.id
    countUs = dbusers.checkUserByTgId(tg_id)
    if countUs == 0:
        dbusers.addNewNaked(callback.from_user.id, callback.from_user.username, callback.from_user.first_name)
        saluteText = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\njobbot —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å \
        –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ä–µ–∑—é–º–µ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.'
        await bot.send_message(callback.from_user.id, saluteText, reply_markup=first_kb)
    elif countUs == 1:
        countComp = dbcompanies.checkCompByTgId(tg_id)
        if countComp == 0:
            await FSMNewcompany.compname.set()
            await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏', reply_markup=cancel_kb)
            await callback.answer()
        elif countComp == 1:
            saluteText = '–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é —Ä–∞–Ω–µ–µ, –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë'
            await bot.send_message(callback.from_user.id, saluteText, reply_markup=mainCompany_kb)

# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewemployer.companyName)
async def get_compname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tg_id'] = message.from_user.id
        if message.from_user.username == None:
            data['tg-login'] = 'None'
        else:
            data['tg-login'] = message.from_user.username
        data['compname'] = message.text
    await FSMNewcompany.next()
    lineBizzes = dbcommon.getAllLineBusiness()
    aboutLinesText = '''
    –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —É–∫–∞–∑–∞–≤ –µ–≥–æ —Ü–∏—Ñ—Ä—É\n\n
    –õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ
    '''
    linesText = ''
    for item in lineBizzes:
        linesText = linesText + str(item['id']) + ' - ' + item['name'] + '\n'
    await message.reply(aboutLinesText, reply_markup=cancel_kb)
    await message.answer(linesText, reply_markup=cancel_kb)

# –õ–æ–≤–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewcompany.lineBuiss)
async def get_linebuiss(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        lineBusinessInfo = dbcommon.getAllLineBusiness()
        listEmp = []
        for item in lineBusinessInfo:
            listEmp.append(item['id'])
        if int(message.text) in listEmp:
            oneLineBusinessInfo = dbcommon.getLineBusinessById(int(message.text))
            # print(oneLineBusinessInfo)
            data['lineBuissName'] = oneLineBusinessInfo[0]['name']
            data['lineBuissId'] = int(oneLineBusinessInfo[0]['id'])
            # print(data)
            await FSMNewcompany.next()
            successText = '''
            –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
            '''
            await bot.send_message(message.from_user.id, successText, reply_markup=cancel_kb)
        else:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

# –õ–æ–≤–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# @dp.message_handler(state=FSMNewcompany.lineBuiss)
async def get_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
        compId = await dbcompanies.addNewCompany(data)
        print(data)
        await state.finish()
        successText = '''
        –ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
        '''
        await bot.send_message(message.from_user.id, successText, reply_markup=mainCompany_kb)




@dp.callback_query_handler(text='createJob')
async def createjob_command(callback : types.CallbackQuery):
    makedJobText = '–†–∞–¥—ã, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –≤–∞–∫–∞–Ω—Å–∏—é —É –Ω–∞—Å üòâ\n'\
    '–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –í–∞—à–µ–π —Ä–∞–±–æ—Ç—ã!\n\n–†–∞–±–æ—Ç–∞—è —Å –Ω–∞–º–∏ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã\\–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª'
    await bot.send_message(callback.from_user.id, makedJobText, reply_markup=sendjobaccept_kb)
    await callback.answer()

# class FSMNewemployer(StatesGroup):
#     companyName = State()
#     lineBizz = State()
#     careerObjective2 = State()
#     desiredSalary2 = State()
#     cityWork2 = State()
#     employment = State()
#     duties = State()
#     requirements = State()
#     workingConditions = State()
#     fio = State()
#     phone2 = State()
#     email2 = State()
#
# # –ù–∞—á–∞–ª–æ –¥–∏–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
# @dp.callback_query_handler(text='sendJobAcc')
# async def command_register(callback : types.Message):
#     await FSMNewemployer.companyName.set()
#     await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏', reply_markup=cancel_kb)
#
# # –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.companyName)
# async def get_companyname(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['tg_id'] = message.from_user.id
#         data['tg-login'] = message.from_user.username
#         data['companyName'] = message.text
#     await FSMNewemployer.next()
#     lineBusinessInfo2 = dbcommon.getAllLineBusiness()
#     aboutLinesText = '''
#     –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —É–∫–∞–∑–∞–≤ –µ–≥–æ —Ü–∏—Ñ—Ä—É\n\n
#     –õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ
#     '''
#     linesText = ''
#     for item in lineBusinessInfo2:
#         linesText = linesText + str(item['id']) + ' - ' + item['name'] + '\n'
#     await message.reply(aboutLinesText, reply_markup=cancel_kb)
#     await message.answer(linesText, reply_markup=cancel_kb)
#
# # –õ–æ–≤–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewapplicant.lineBizz)
# async def get_linebizz(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         lineBizzInfo = dbcommon.getAllLineBusiness()
#         for item in lineBizzInfo:
#             if (item['id'] == message.text):
#                 data['lineBizz'] = item['name']
#                 data['lineBizzId'] = int(item['id'])
#                 break
#             else:
#                 data['lineBizz'] = message.text
#                 data['lineBizzId'] = 0
#         # data['lineBusiness'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", reply_markup=cancel_kb)
#
# # –õ–æ–≤–∏–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.careerObjective2)
# async def get_careerobjective2(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['careerObjective2'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É", reply_markup=cancel_kb)
#
# # –õ–æ–≤–∏–º –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.desiredSalary2)
# async def get_desiredsalary2(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['desiredSalary2'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ª–∏–±–æ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)", reply_markup=cancel_kb)
#
# # –õ–æ–≤–∏–º –≥–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã (–ª–∏–±–æ —É–¥–∞–ª–µ–Ω–∫–∞) –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.cityWork2)
# async def get_citywork2(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['cityWork2'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –¥–ª—è —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ø–æ–ª–Ω–∞—è –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è)", reply_markup=cancel_kb)
#
# # –ü–∏—à–µ–º —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.employment)
# async def get_employments(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['employment'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–†–∞—Å–ø–∏—à–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=cancel_kb)
#
# # –ü–∏—à–µ–º –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.duties)
# async def get_duties(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['duties'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–∞–ª–∏—á–∏–µ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç.–¥.)", reply_markup=cancel_kb)
#
# # –ü–∏—à–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.requirements)
# async def get_requirement(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['requirements'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã", reply_markup=cancel_kb)
#
# # –ü–∏—à–µ–º —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.workingConditions)
# async def get_workingconditions(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['workingConditions'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ –§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n–õ–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥", reply_markup=skip_step)
#
# # –ü–∏—à–µ–º –§–ò–û –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.fio)
# async def get_fio(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
#             data['fio'] = 'empty'
#         else:
#             data['fio'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n–õ–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥", reply_markup=skip_step)
#
# # –ü–∏—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
# # @dp.message_handler(state=FSMNewemployer.phone2)
# async def get_phone2(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
#             data['phone2'] = 'empty'
#         else:
#             data['phone2'] = message.text
#     await FSMNewemployer.next()
#     await message.reply("–£–∫–∞–∂–∏—Ç–µ email –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n–õ–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥", reply_markup=skip_step)
#
# # –ü–∏—à–µ–º email –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ –≤ —Å–ª–æ–≤–∞—Ä—å, –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# # @dp.message_handler(state=FSMNewemployer.email2)
# async def get_email2(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
#             data['email2'] = 'empty'
#         else:
#             data['email2'] = message.text
#     await dbusers.addNewEmployer(state)
#     await state.finish()
#     successText = '''
#     –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º
#     '''
#     await bot.send_message(message.from_user.id, successText)



def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(go_to_high, Text(equals="–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ignore_case=True))
    dp.register_message_handler(cancel_handler, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(cancel_handler, state="*", commands="–æ—Ç–º–µ–Ω–∞")
    dp.register_message_handler(get_firstname, state=FSMNewapplicant.firstname)
    dp.register_message_handler(get_lastname, state=FSMNewapplicant.lastname)
    dp.register_message_handler(get_patronymic, state=FSMNewapplicant.patronymic)
    dp.register_message_handler(get_linebusiness, state=FSMNewapplicant.lineBusiness)
    dp.register_message_handler(get_educationform, state=FSMNewapplicant.educationForm)
    dp.register_message_handler(get_addededucationform, state=FSMNewapplicant.addedEducationForm)
    dp.register_message_handler(get_careerobjective, state=FSMNewapplicant.careerObjective)
    dp.register_message_handler(get_desiredsalary, state=FSMNewapplicant.desiredSalary)
    dp.register_message_handler(get_citywork, state=FSMNewapplicant.cityWork)
    dp.register_message_handler(get_distantwork, state=FSMNewapplicant.distantWork)
    dp.register_message_handler(get_relocate, state=FSMNewapplicant.relocate)
    dp.register_message_handler(get_workexperience, state=FSMNewapplicant.workExperience)
    dp.register_message_handler(get_desiredworkschedule, state=FSMNewapplicant.desiredWorkSchedule)
    dp.register_message_handler(get_phone, state=FSMNewapplicant.phone)
    dp.register_message_handler(get_email, state=FSMNewapplicant.email)
    # dp.register_message_handler(load_pdffile, content_types=['document'], state=FSMNewapplicant.pdfFile)
    # –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    dp.register_message_handler(get_compname, state=FSMNewcompany.compname)
    dp.register_message_handler(get_linebuiss, state=FSMNewcompany.lineBuiss)
    dp.register_message_handler(get_city, state=FSMNewcompany.city)
    dp.register_message_handler(create_new_resum, Text(equals="–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ", ignore_case=True))
    # –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É
    # dp.register_message_handler(get_companyname, state=FSMNewemployer.companyName)
    # dp.register_message_handler(get_linebizz, state=FSMNewemployer.lineBizz)
    # dp.register_message_handler(get_careerobjective2, state=FSMNewemployer.careerObjective2)
    # dp.register_message_handler(get_desiredsalary2, state=FSMNewemployer.desiredSalary2)
    # dp.register_message_handler(get_citywork2, state=FSMNewemployer.cityWork2)
    # dp.register_message_handler(get_employments, state=FSMNewemployer.employment)
    # dp.register_message_handler(get_duties, state=FSMNewemployer.duties)
    # dp.register_message_handler(get_requirement, state=FSMNewemployer.requirements)
    # dp.register_message_handler(get_workingconditions, state=FSMNewemployer.workingConditions)
    # dp.register_message_handler(get_fio, state=FSMNewemployer.fio)
    # dp.register_message_handler(get_phone2, state=FSMNewemployer.phone2)
    # dp.register_message_handler(get_email2, state=FSMNewemployer.email2)
